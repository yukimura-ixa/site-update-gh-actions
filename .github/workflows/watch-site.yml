name: Watch website for updates

# Trigger this workflow on schedule and manual dispatch
on:
  schedule:
    # GitHub cron runs in **UTC**. 15:00,23:00 UTC = 22:00,06:00 Bangkok.
    # Runs 4 times daily: 01:00, 02:00, 08:00, 09:00 UTC
    - cron: "0 1,2,8,9 * * *"
  workflow_dispatch: {} # Allow manual triggering from GitHub UI

# Grant permissions needed for this workflow
permissions:
  contents: write # Required to commit state changes back to repository
  issues: write   # Required to create GitHub issues for notifications

jobs:
  watch:
    runs-on: ubuntu-latest
    env:
      # Target website URL to monitor for changes
      URL: https://www.csc.ku.ac.th/th/
    steps:
      # Step 1: Download the repository code to access previous state files
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Fetch the website content and generate a unique change identifier
      # This step downloads the target website and creates an ID to detect changes
      - name: Fetch page & compute change id
        id: get
        run: |
          set -euo pipefail
          # Create state directory to store website snapshots and metadata
          mkdir -p state
          
          # Download website with proper headers to mimic a real browser
          # -L: follow redirects, -sS: silent but show errors, -A: user agent
          # -D: save response headers, -o: save response body
          curl -L -sS -A "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120 Safari/537.36" \
               -D state/headers.tmp -o state/body.tmp "$URL"
      
          # Debug output: Show first 20 lines of HTTP response headers
          printf '%s\n' '--- status+headers (first 20 lines) ---'
          head -n 20 state/headers.tmp || true
          printf '%s\n' '---------------------------------------'
      
          # Extract cache-related headers to create a unique identifier for the page state
          # Try ETag first (most reliable), then Last-Modified, finally content hash
          etag=$(awk 'BEGIN{IGNORECASE=1} /^etag:/{print $2}' state/headers.tmp | tr -d '\r"')
          lm=$(awk 'BEGIN{IGNORECASE=1} /^last-modified:/{sub(/^[^:]*:[[:space:]]*/,""); print}' state/headers.tmp | tr -d '\r')
      
          # Generate unique identifier based on server headers or content hash
          if [ -n "$etag" ]; then 
            id="etag:$etag"
          elif [ -n "$lm" ]; then 
            id="lm:$lm"
          else 
            # Create normalized version for comparison (ignore trivial changes)
            # Remove Set-Cookie headers and normalize nonce values in JavaScript
            grep -v '^Set-Cookie:' state/headers.tmp > state/headers.normalized || true
            
            # Normalize body content: replace dynamic nonce values with placeholder
            # This prevents false positives from session tokens and nonces
            sed -E 's/"nonce":"[^"]*"/"nonce":"NORMALIZED"/g' state/body.tmp > state/body.normalized
            
            # Compute hash on normalized content (headers + body)
            id=$(cat state/headers.normalized state/body.normalized | sha256sum | awk '{print $1}')
          fi
      
          # Save outputs for use in subsequent steps
          echo "id=$id" >> "$GITHUB_OUTPUT"
          printf '%s\n' "$URL" > state/url.txt
          cp state/body.tmp state/last.html || true
          printf '%s\n' "$id" > state/current.id

      # Step 3: Compare current website state with previous state to detect changes
      # This step determines if the website has been updated since the last check
      - name: Detect change
        id: detect
        run: |
          # Compare current identifier with previous one stored from last run
          # If files are identical (cmp -s), no change detected
          if [ -f state/previous.id ] && cmp -s state/current.id state/previous.id; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            # Change detected: update previous.id for next run
            echo "changed=true" >> "$GITHUB_OUTPUT"
            cp state/current.id state/previous.id
            
            # Generate diff summary for issue notification
            if [ -f state/last.html.prev ]; then
              # Create normalized versions of both old and new content
              sed -E 's/"nonce":"[^"]*"/"nonce":"NORMALIZED"/g' state/last.html.prev > state/prev.normalized
              sed -E 's/"nonce":"[^"]*"/"nonce":"NORMALIZED"/g' state/last.html > state/curr.normalized
              
              # Compute diff statistics
              diff_output=$(diff -u state/prev.normalized state/curr.normalized 2>/dev/null || echo "")
              
              # Save diff for issue (limit to 100 lines to avoid huge issues)
              if [ -n "$diff_output" ]; then
                echo "$diff_output" | head -n 100 > state/diff.txt
                diff_lines=$(echo "$diff_output" | wc -l)
              else
                echo "No previous version to compare" > state/diff.txt
                diff_lines=0
              fi
              echo "diff_lines=$diff_lines" >> "$GITHUB_OUTPUT"
            else
              echo "No previous version to compare" > state/diff.txt
              echo "diff_lines=0" >> "$GITHUB_OUTPUT"
            fi
            
            # Keep a copy of current HTML for next comparison
            cp state/last.html state/last.html.prev
          fi

      # Step 4: Commit the updated state files back to the repository
      # This only runs when a change is detected to preserve git history
      - name: Commit state (only when changed)
        if: steps.detect.outputs.changed == 'true'
        id: commit
        run: |
          # Configure git with GitHub Actions bot identity
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Stage all state directory changes (HTML snapshot, IDs, metadata)
          git add state
          
          # Commit with descriptive message including the change identifier
          git commit -m "Update detected for ${{ steps.get.outputs.id }}"
          
          # Push changes back to repository
          git push
          
          # Output commit SHA for use in notifications
          echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      # Step 5: Generate AI summary of the changes (only for meaningful changes)
      # This uses GitHub Models API to provide human-readable change summaries
      - name: Generate AI summary of changes
        if: steps.detect.outputs.changed == 'true' && steps.detect.outputs.diff_lines > 0
        id: ai_summary
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Read the diff content
          diff_content=$(cat state/diff.txt | head -n 200)
          
          # Prepare prompt for AI to summarize the changes
          prompt="You are analyzing a diff of a website's HTML content. The diff shows changes between two versions of the page. Please provide a concise summary of what changed on the website. Focus on meaningful content changes and ignore technical details like CSS, JavaScript, or formatting changes. Keep the summary under 3 sentences.

          Here is the diff:
          
          $diff_content"
          
          # Call GitHub Models API (gpt-4o-mini model)
          summary=$(curl -s -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{
              \"model\": \"gpt-4o-mini\",
              \"messages\": [{
                \"role\": \"user\",
                \"content\": $(echo "$prompt" | jq -Rs .)
              }],
              \"max_tokens\": 150,
              \"temperature\": 0.3
            }" \
            "https://models.inference.ai.azure.com/chat/completions" | jq -r '.choices[0].message.content // "AI summary not available"')
          
          # Save summary to output
          echo "summary<<EOF" >> "$GITHUB_OUTPUT"
          echo "$summary" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      # Step 6: Create a GitHub issue to notify about the detected website change
      # This provides a permanent record and notification mechanism for changes
      # Only creates issue when there's actual content change (diff_lines > 0)
      - name: Open issue notification (only when changed with diff)
        if: steps.detect.outputs.changed == 'true' && steps.detect.outputs.diff_lines > 0
        uses: actions/github-script@v7
        with:
          script: |
            // Read saved URL and prepare notification data
            const fs = require('fs');
            const url = fs.readFileSync('state/url.txt','utf8').trim();
            const id  = `${{ steps.get.outputs.id }}`;
            const sha = `${{ steps.commit.outputs.sha }}`;
            const diffLines = `${{ steps.detect.outputs.diff_lines }}`;
            const aiSummary = `${{ steps.ai_summary.outputs.summary }}`;
            
            // Read diff content if available
            let diffContent = '';
            try {
              diffContent = fs.readFileSync('state/diff.txt', 'utf8');
            } catch (e) {
              diffContent = 'Diff not available';
            }
            
            // Create formatted issue body with update details
            const body = [
              `Detected an update at **${url}**`,
              ``,
              `**Change Summary (AI-generated):**`,
              `> ${aiSummary || 'No summary available'}`,
              ``,
              `**Change Details:**`,
              `- Identifier: \`${id}\``,
              `- Commit: https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${sha}`,
              `- HTML snapshot saved at \`state/last.html\` in the repo`,
              `- Diff lines: ${diffLines}`,
              ``,
              `**Notes:**`,
              `- Trivial changes like Set-Cookie headers and JavaScript nonce values are normalized before comparison`,
              `- This means changes to session IDs (PHPSESSID, dwqa_anonymous) and nonces in \`pdpa_thailand\` variable are ignored`,
              `- Only meaningful content changes trigger this notification`,
              ``,
              `<details>`,
              `<summary>Content Diff (normalized)</summary>`,
              ``,
              `\`\`\`diff`,
              diffContent,
              `\`\`\``,
              `</details>`
            ].join('\n');
            
            // Create GitHub issue with change notification
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Site updated: ${url}`,
              body
            });

      # Step 7: Send instant notification via Telegram bot
      # This provides immediate mobile/desktop notification for website changes
      # Only sends notification when there's actual content change (diff_lines > 0)
      - name: Telegram notify
        if: steps.detect.outputs.changed == 'true' && steps.detect.outputs.diff_lines > 0
        env:
          # Telegram bot credentials stored as GitHub repository secrets
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          URL: ${{ env.URL }}
        run: |
          # Telegram Bot API endpoint for sending messages
          api="https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage"
          text="Update detected: ${URL}"
          
          # Send notification message via Telegram API
          curl -sS -X POST "$api" \
            -d chat_id="${TELEGRAM_CHAT_ID}" \
            -d text="$text" \
            -d disable_web_page_preview=true \
            -d disable_notification=false
